{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tomik062/AI_Project/blob/main/notebook\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "fetch from github"
      ],
      "metadata": {
        "id": "SU6vceq0jJSn"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3b2f8140",
        "outputId": "999bee89-3ee0-400b-db07-682fd12b5e6c"
      },
      "source": [
        "import requests\n",
        "import os\n",
        "\n",
        "repo_owner = 'tomik062'\n",
        "repo_name = 'AI_Project'\n",
        "directory_path = 'data'\n",
        "url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/contents/{directory_path}'\n",
        "\n",
        "response = requests.get(url)\n",
        "response.raise_for_status()  # Raise an exception for bad status codes\n",
        "files_in_directory = response.json()\n",
        "\n",
        "# Create a directory to save the downloaded files\n",
        "if not os.path.exists(directory_path):\n",
        "    os.makedirs(directory_path)\n",
        "\n",
        "for item in files_in_directory:\n",
        "    if item['type'] == 'file':\n",
        "        download_url = item['download_url']\n",
        "        file_content = requests.get(download_url).content\n",
        "        file_name = os.path.join(directory_path, item['name'])\n",
        "\n",
        "        with open(file_name, 'wb') as f:\n",
        "            f.write(file_content)\n",
        "\n",
        "        print(f\"Downloaded {item['name']} to {file_name}\")"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloaded GNI_PPP_const_2021_dollars.csv to data/GNI_PPP_const_2021_dollars.csv\n",
            "Downloaded Religious Composition 2010-2020 (percentages).xlsx to data/Religious Composition 2010-2020 (percentages).xlsx\n",
            "Downloaded abortion-rates-by-country-2025.csv to data/abortion-rates-by-country-2025.csv\n",
            "Downloaded age-at-first-marriage-by-country-2025.csv to data/age-at-first-marriage-by-country-2025.csv\n",
            "Downloaded average-workweek-by-country-2025.csv to data/average-workweek-by-country-2025.csv\n",
            "Downloaded female-labor-force-participation-rates-slopes.csv to data/female-labor-force-participation-rates-slopes.csv\n",
            "Downloaded gender_inequality_index to data/gender_inequality_index\n",
            "Downloaded happiness-cantril-ladder.csv to data/happiness-cantril-ladder.csv\n",
            "Downloaded health expenditure per capita.xls to data/health expenditure per capita.xls\n",
            "Downloaded high_education_female.xlsx to data/high_education_female.xlsx\n",
            "Downloaded high_education_male.xlsx to data/high_education_male.xlsx\n",
            "Downloaded human_development_index.xlsx to data/human_development_index.xlsx\n",
            "Downloaded maternity-leave-by-country-2025.xlsx to data/maternity-leave-by-country-2025.xlsx\n",
            "Downloaded period-average-age-of-mothers.csv to data/period-average-age-of-mothers.csv\n",
            "Downloaded physicians per capita.xls to data/physicians per capita.xls\n",
            "Downloaded social-media-users-by-country-2025.csv to data/social-media-users-by-country-2025.csv\n",
            "Downloaded total-fertility-rate.csv to data/total-fertility-rate.csv\n",
            "Downloaded urban-population-share.csv to data/urban-population-share.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def extract_fertility():\n",
        "    df_fertility = pd.read_csv('data/total-fertility-rate.csv', delimiter=',', engine='python', skiprows=4)\n",
        "    df_fertility = df_fertility.drop(columns=['Indicator Name', 'Indicator Code', '2024', 'Unnamed: 69'])\n",
        "    regions_to_exclude = [\n",
        "        'AFE', 'AFW', 'ARB', 'CSS', 'EAP', 'EAS', 'ECA', 'ECS', 'EMU', 'EUU', 'FCS', 'HIC', 'HPC',\n",
        "        'IBD', 'IDA', 'IDB', 'IDX', 'LAC', 'LCN', 'LDC', 'LIC', 'LMC', 'LMY', 'MEA', 'MIC', 'MNA',\n",
        "        'NAC', 'OED', 'OSS', 'PRE', 'PST', 'SAS', 'SSA', 'SSF', 'SST', 'UMC', 'WLD'\n",
        "    ]\n",
        "    df_fertility = df_fertility[~df_fertility['Country Code'].isin(regions_to_exclude)]\n",
        "    return df_fertility"
      ],
      "metadata": {
        "id": "cYzmct4Kokwc"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "def extract_urbanization():\n",
        "    df_urbanization = pd.read_csv('data/urban-population-share.csv')\n",
        "    regions_to_exclude_by_name = [\n",
        "        'Africa', 'Asia', 'Europe', 'North America', 'South America', 'Oceania', 'World',\n",
        "        'High income', 'Low income', 'Middle income', 'Lower middle income', 'Upper middle income',\n",
        "        'Least developed countries', 'Developing countries', 'Sub-Saharan Africa',\n",
        "        'Latin America & Caribbean', 'East Asia & Pacific', 'Europe & Central Asia',\n",
        "        'Middle East & North Africa', 'South Asia', 'Arab World', 'Euro area', 'European Union',\n",
        "        'OECD members', 'Small states', 'Fragile and conflict affected situations',\n",
        "        'Heavily indebted poor countries (HIPC)', 'IDA & IBRD total', 'IDA Countries',\n",
        "        'IDA blend', 'IDA only', 'Other small states', 'Post-demographic dividend',\n",
        "        'Early-demographic dividend', 'Late-demographic dividend', 'Pre-demographic dividend'\n",
        "\n",
        "    ]\n",
        "    df_urbanization = df_urbanization[~df_urbanization['Entity'].isin(regions_to_exclude_by_name)]\n",
        "    return df_urbanization"
      ],
      "metadata": {
        "id": "cQfqLY8xr4wh"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "init data for single year"
      ],
      "metadata": {
        "id": "tE6LZVA9jzsY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data={}\n",
        "df_fertility=extract_fertility()\n",
        "df_urbanization=extract_urbanization()\n",
        "print(df_urbanization)\n",
        "df_fertility_2023 = df_fertility[['Country Name', '2023']].copy()\n",
        "df_fertility_2023['2023'] = pd.to_numeric(df_fertility_2023['2023'], errors='coerce')\n",
        "df_fertility_2023.dropna(subset=['2023'], inplace=True)\n",
        "for index, row in df_fertility_2023.iterrows():\n",
        "    country_name = row['Country Name']\n",
        "    fertility_rate = row['2023']\n",
        "    data[country_name] = (fertility_rate, [])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C_L3SOTcjyt0",
        "outputId": "3e376931-134a-46b8-8586-c91bedc76d72"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            Entity Code   Year  \\\n",
            "0      Afghanistan  AFG -10000   \n",
            "1      Afghanistan  AFG  -9000   \n",
            "2      Afghanistan  AFG  -8000   \n",
            "3      Afghanistan  AFG  -7000   \n",
            "4      Afghanistan  AFG  -6000   \n",
            "...            ...  ...    ...   \n",
            "33743     Zimbabwe  ZWE   2046   \n",
            "33744     Zimbabwe  ZWE   2047   \n",
            "33745     Zimbabwe  ZWE   2048   \n",
            "33746     Zimbabwe  ZWE   2049   \n",
            "33747     Zimbabwe  ZWE   2050   \n",
            "\n",
            "       Share of population residing in urban areas (HYDE estimates and UN projections)  \n",
            "0                                           0.000000e+00                                \n",
            "1                                           7.868235e-14                                \n",
            "2                                           2.360471e-13                                \n",
            "3                                           7.081412e-13                                \n",
            "4                                           2.124424e-12                                \n",
            "...                                                  ...                                \n",
            "33743                                       4.329900e+01                                \n",
            "33744                                       4.395800e+01                                \n",
            "33745                                       4.461900e+01                                \n",
            "33746                                       4.528200e+01                                \n",
            "33747                                       4.594700e+01                                \n",
            "\n",
            "[32812 rows x 4 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "09d1ffcf",
        "outputId": "fd637f44-0a39-484d-8c04-d0ecd1f45d14"
      },
      "source": [
        "fertility_data_2023 = []\n",
        "for index, row in df_fertility_2023.iterrows():\n",
        "    fertility_rate = row['2023']\n",
        "    fertility_data_2023.append((fertility_rate, []))\n",
        "\n",
        "print(fertility_data_2023[:5])"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(1.602, []), (4.84, []), (5.124, []), (1.348, []), (1.082, [])]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d92739ea"
      },
      "source": [
        "## Summary:\n",
        "\n",
        "### Data Analysis Key Findings\n",
        "\n",
        "*   The initial data loading required skipping the first 4 rows due to non-tabular content or metadata in the file.\n",
        "*   Columns 'Indicator Name', 'Indicator Code', '2024', and 'Unnamed: 69' were removed as they were either redundant or empty and not required for the analysis.\n",
        "*   A new DataFrame was created containing only the 'Country Name' and '2023' fertility rate data.\n",
        "*   A list of tuples was successfully generated, with each tuple containing the 2023 fertility rate and an empty list `[]`.\n",
        "\n",
        "### Insights or Next Steps\n",
        "\n",
        "*   The resulting list of tuples `(fertility_rate, [])` provides a structured format that could be used to store additional country-specific data in the empty list for further analysis or visualization.\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome to Colab",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}