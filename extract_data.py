# -*- coding: utf-8 -*-
"""Welcome_to_Colab (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1golDk7KZpqdkJPCdhSpdpt6eR4HaagEx

fetch from github
"""

import requests
import os
import pandas as pd
import io

repo_owner = 'tomik062'
repo_name = 'AI_Project'
directory_path = 'data'
url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/contents/{directory_path}'

response = requests.get(url)
response.raise_for_status()  # Raise an exception for bad status codes
files_in_directory = response.json()

# Create a directory to save the downloaded files
if not os.path.exists(directory_path):
    os.makedirs(directory_path)

for item in files_in_directory:
    if item['type'] == 'file':
        download_url = item['download_url']
        file_content = requests.get(download_url).content
        file_name = os.path.join(directory_path, item['name'])

        with open(file_name, 'wb') as f:
            f.write(file_content)

        print(f"Downloaded {item['name']} to {file_name}")

def extract_WorldBank():
    df_list=[]
    df_list.append(extract_WorldBank_file('data/healthcare-expenditure-per-capita-ppp.csv'))
    df_list.append(extract_WorldBank_file('data/physicians-per-capita.csv'))
    df_list.append(extract_WorldBank_file('data/GNI_PPP_const_2021_dollars.csv'))
    return df_list

def extract_WorldBank_file(file):
    header_row_index = None
    with open(file, 'r', encoding='utf-8') as f:
      for i, line in enumerate(f):
          if 'Country Name' in line and 'Country Code' in line:
              header_row_index = i
              break
    if(header_row_index==None):
      print("Error: Header row not found in the file.")
      return None
    df = pd.read_csv(file, delimiter=',', engine='python', skiprows=header_row_index)
    df = df.drop(columns=['Indicator Name', 'Indicator Code', '2024', 'Unnamed: 69'],errors='ignore')
    return df

def extract_OurWorldInData():
    df_list=[]
    df_list.append(extract_OurWorldInData_file('data/urban-population-share.csv'))
    df_list.append(extract_OurWorldInData_file('data/period-average-age-of-mothers.csv'))
    df_list.append(extract_OurWorldInData_file('data/happiness-cantril-ladder.csv'))
    df_list.append(extract_OurWorldInData_file('data/female-labor-force-participation-rates-slopes.csv'))
    return df_list
def extract_OurWorldInData_file(file_name):
    df = pd.read_csv(file_name, delimiter=',', engine='python')
    if 'Entity' not in df.columns:
        print("Error: 'Entity' column not found. Cannot filter regions.")
        return df

    country_name_mapping = {
        'Egypt': 'Egypt, Arab Rep.',
        'Bahamas': 'Bahamas, The',
        'Brunei': 'Brunei Darussalam',
        'Democratic Republic of Congo': 'Congo, Dem. Rep.',
        'Congo': 'Congo, Rep.',
        'Cape Verde': 'Cabo Verde',
        'Gambia': 'Gambia, The',
        'Iran': 'Iran, Islamic Rep.',
        'Kyrgyzstan': 'Kyrgyz Republic',
        'Saint Kitts and Nevis': 'St. Kitts and Nevis',
        'South Korea': 'Korea, Rep.',
        'Laos': 'Lao PDR',
        'Saint Lucia': 'St. Lucia',
        'North Macedonia': 'North Macedonia',
        'Micronesia (country)': 'Micronesia, Fed. Sts.',
        'Russia': 'Russian Federation',
        'Slovakia': 'Slovak Republic',
        'Syria': 'Syrian Arab Republic',
        'East Timor': 'Timor-Leste',
        'Turkey': 'Turkiye',
        'Saint Vincent and the Grenadines': 'St. Vincent and the Grenadines',
        'Venezuela': 'Venezuela, RB',
        'Vietnam': 'Viet Nam',
        'Yemen': 'Yemen, Rep.',
        'Hong Kong': 'Hong Kong SAR, China',
        'Macao': 'Macao SAR, China',
        'St. Martin (French part)': 'St. Martin (French part)',
        'Puerto Rico': 'Puerto Rico (US)',
        "North Korea": "Korea, Dem. People's Rep.",
        'Palestine': 'West Bank and Gaza',
        'Kosovo': 'Kosovo',
        'United States Virgin Islands': 'Virgin Islands (U.S.)',
    }

    df['Entity'] = df['Entity'].apply(lambda x: country_name_mapping.get(x, x))


    # Reshape the DataFrame from long to wide format.
    # 'Entity' and 'Code' will be the id_vars, 'Year' will be the pivot column,
    # and the remaining column (the urbanization share) will be the value.
    # We need to find the name of the urbanization share column dynamically.
    value_vars = [col for col in df.columns if col not in ['Entity', 'Code', 'Year']]

    if not value_vars:
        print("Error: Could not find the urbanization share value column.")
        return df # Return without reshaping if value column is missing

    # Assuming there is only one value column after excluding id_vars and Year
    value_name = value_vars[0]


    # Pivot the DataFrame to wide format. Missing combinations of index and columns will result in NaN.
    df_wide = df.pivot(index=['Entity', 'Code'], columns='Year', values=value_name).reset_index()

    # Rename columns to match the fertility DataFrame structure
    df_wide = df_wide.rename(columns={'Entity': 'Country Name', 'Code': 'Country Code'})

    return df_wide

def extract_PewReaserch():
    df_list = []
    file_path = 'data/Religious-Composition-percentages.csv'
    df = pd.read_csv(file_path)

    # Map country names to match the fertility rate dataframe
    country_name_mapping = {
        'Taiwan': 'Taiwan, China',
        'Vietnam': 'Viet Nam',
        'Russia': 'Russian Federation',
        'Iran': 'Iran, Islamic Rep.',
        'Syria': 'Syrian Arab Republic',
        'South Korea': 'Korea, Rep.',
        'North Korea': "Korea, Dem. People's Rep.",
        'Egypt': 'Egypt, Arab Rep.',
        'Yemen': 'Yemen, Rep.',
        'Slovakia': 'Slovak Republic',
        'Brunei': 'Brunei Darussalam',
        'Ivory Coast': "Cote d'Ivoire",
        'Kyrgyzstan': 'Kyrgyz Republic',
        'Laos': 'Lao PDR',
        'Micronesia, Federated States of': 'Micronesia, Fed. Sts.',
        'Saint Lucia': 'St. Lucia',
        'Saint Vincent and the Grenadines': 'St. Vincent and the Grenadines',
        'Venezuela': 'Venezuela, RB',
        'Hong Kong': 'Hong Kong SAR, China',
        'Macao': 'Macao SAR, China',
        'St. Martin (French part)': 'St. Martin (French part)',
        'Puerto Rico': 'Puerto Rico (US)',
        'Palestinian territories': 'West Bank and Gaza',
        'U.S. Virgin Islands': 'Virgin Islands (U.S.)',
        'Turkey': 'Turkiye',
        'Bahamas': 'Bahamas, The',
        'Democratic Republic of the Congo': 'Congo, Dem. Rep.',
        'Republic of the Congo': 'Congo, Rep.',
        'Cape Verde': 'Cabo Verde',
        'Gambia': 'Gambia, The',
        'Czech Republic': 'Czechia',
        'Bosnia-Herzegovina': 'Bosnia and Herzegovina',
        'Federated States of Micronesia': 'Micronesia, Fed. Sts.'

    }

    df['Country'] = df['Country'].replace(country_name_mapping)

    # Identify religion columns (between 'Population' and 'Level')
    columns = df.columns.tolist()
    try:
        population_index = columns.index('Population')
        level_index = columns.index('Level')
        religion_columns = columns[population_index + 1:level_index]
    except ValueError:
        print("Error: 'Population' or 'Level' column not found.")
        # Return with just the region dataframe if columns are missing
        df_region = df.pivot_table(index=['Country', 'Countrycode'], columns='Year', values='Region', aggfunc='first').reset_index()
        df_region = df_region.rename(columns={'Country': 'Country Name', 'Countrycode': 'Country Code'})
        return [df_region]


    # Create a dataframe for each religion
    for religion in religion_columns:
        # Select relevant columns for the current religion
        religion_df = df[['Country', 'Countrycode', 'Year', religion]].copy()

        # Pivot the DataFrame to get years as columns
        df_religion_pivot = religion_df.pivot_table(index=['Country', 'Countrycode'], columns='Year', values=religion).reset_index()
        df_religion_pivot = df_religion_pivot.rename(columns={'Country': 'Country Name', 'Countrycode': 'Country Code'})

        # Get all year columns dynamically
        year_columns = [col for col in df_religion_pivot.columns if isinstance(col, int)]
        df_religion_filtered = df_religion_pivot[['Country Name', 'Country Code'] + year_columns]


        df_list.append(df_religion_filtered)

    # Generate one-hot encoded dataframes for each region based
    # on region (in 2010, same regions as in 2020)
    unique_regions = df['Region'].unique()
    all_years = range(1900, 2025)
    df_2010 = df[df['Year'] == 2010][['Country', 'Region', 'Countrycode']].copy()
    country_region_2010 = df_2010.set_index('Country')['Region'].to_dict()
    country_code_map = df_2010.set_index('Country')['Countrycode'].to_dict()

    # List of regions in the order of appending
    regions_list = [
        'Asia-Pacific','Europe','Latin America-Caribbean',
        'Middle East-North Africa','North America','Sub-Saharan Africa'
        ] # Add all unique regions here in the desired order

    for region in regions_list:
        # Create a new dataframe with all countries and years
        all_countries = df[['Country', 'Countrycode']].drop_duplicates()
        index = pd.MultiIndex.from_product([all_countries['Country'], all_years], names=['Country', 'Year'])
        one_hot_df = pd.DataFrame(index=index).reset_index()
        one_hot_df = one_hot_df.merge(all_countries, on='Country', how='left')
        one_hot_df[region] = 0
        # Set 1 for countries whose region in 2010 matches the current region
        for country in all_countries['Country']:
            if country in country_region_2010 and country_region_2010[country] == region:
                one_hot_df.loc[one_hot_df['Country'] == country, region] = 1

        # Pivot to get years as columns
        one_hot_pivot = one_hot_df.pivot_table(index=['Country', 'Countrycode'], columns='Year', values=region).reset_index()
        one_hot_pivot = one_hot_pivot.rename(columns={'Country': 'Country Name', 'Countrycode': 'Country Code'})

        # Ensure all years from 1900 to 2024 are present as columns, filled with 0 if not in the original data
        for year in all_years:
             if year not in one_hot_pivot.columns:
                one_hot_pivot[year] = 0
        # Sort columns to ensure correct order
        one_hot_pivot = one_hot_pivot[['Country Name', 'Country Code'] + sorted([col for col in one_hot_pivot.columns if isinstance(col, int)])]
        df_list.append(one_hot_pivot)
    return df_list


def extract_UNDP():
  df_list=[]
  df_list.append(extract_UNDP_file('data/high_education_male.xlsx'))
  df_list.append(extract_UNDP_file('data/high_education_female.xlsx'))
  df_list.append(extract_UNDP_file('data/human_development_index.xlsx'))
  df_list.append(extract_UNDP_file('data/gender-inequality-index.xlsx'))
  return df_list
def extract_UNDP_file(file):
    df = pd.read_excel(file)

    # Map country names to match the fertility rate dataframe
    country_name_mapping = {
        "Bahamas" : "Bahamas, The",
        "Bolivia (Plurinational State of)" : "Bolivia",
        "Côte d'Ivoire" : "Cote d'Ivoire",
        "Congo (Democratic Republic of the)" : "Congo, Dem. Rep.",
        "Congo" : "Congo, Rep.",
        "Egypt" : "Egypt, Arab Rep.",
        "Gambia" : "Gambia, The",
        "Hong Kong, China (SAR)" : "Hong Kong SAR, China",
        "Iran (Islamic Republic of)" : "Iran, Islamic Rep.",
        "Kyrgyzstan" : "Kyrgyz Republic",
        "Korea (Republic of)" : "Korea, Rep.",
        "Lao People's Democratic Republic" : "Lao PDR",
        "Saint Lucia" : "St. Lucia",
        "Moldova (Republic of)" : "Moldova",
        "Korea (Democratic People's Rep. of)" : "Korea, Dem. People's Rep.",
        "Palestine, State of" : "West Bank and Gaza",
        "Slovakia" : "Slovak Republic",
        "Eswatini (Kingdom of)" : "Eswatini",
        "Türkiye" : "Turkiye",
        "Tanzania (United Republic of)" : "Tanzania",
        "Saint Vincent and the Grenadines" : "St. Vincent and the Grenadines",
        "Venezuela (Bolivarian Republic of)" : "Venezuela, RB",
        "Yemen" : "Yemen, Rep.",
        "Micronesia (Federated States of)" : "Micronesia, Fed. Sts.",
        "Saint Kitts and Nevis" : "St. Kitts and Nevis"
    }
    df['country'] = df['country'].replace(country_name_mapping)
    # Pivot the DataFrame to have years as columns
    value_name = 'value'
    df_pivot = df.pivot_table(index=['country', 'countryIsoCode'], columns='year', values=value_name).reset_index()
    df_pivot = df_pivot.rename(columns={'country': 'Country Name', 'countryIsoCode': 'Country Code'})
    return df_pivot

def extract_Worldpopulationreview():
    df_list=[]
    df_list.append(extract_Worldpopulationreview_file
     ('data/age-at-first-marriage-by-country-2025.csv','AgeAtFirstMarriage_AvgAgeWomen_years'))
    df_list.append(extract_Worldpopulationreview_file
     ('data/age-at-first-marriage-by-country-2025.csv','AgeAtFirstMarriage_AvgAgeMen_years'))
    df_list.append(extract_Worldpopulationreview_file
     ('data/maternity-leave-by-country-2025.csv','MaternityLeave_LengthInWeeks_numOfWeeks_YearFree'))
    df_list.append(extract_Worldpopulationreview_file
     ('data/average-workweek-by-country-2025.csv','AvgWorkWeek_AvgWeeklyHoursWorkedMalesViaILOSTAT_hrs_Est2025'))
    df_list.append(extract_Worldpopulationreview_file
     ('data/average-workweek-by-country-2025.csv','AvgWorkWeek_AvgWeeklyHoursWorkedFemalesViaILOSTAT_hrs_Est2025'))
    df_list.append(extract_Worldpopulationreview_file
     ('data/abortion-rates-by-country-2025.csv','AbortionRatesRatePer1000Women2024'))
    df_list.append(extract_Worldpopulationreview_file
     ('data/social-media-users-by-country-2025.csv','SocialMediaUsers_PctOfPop'))

    return df_list

def extract_Worldpopulationreview_file(file,target_column):
    df = pd.read_csv(file)
    new_df = df[['country', 'flagCode', target_column]].copy()
    new_df = new_df.rename(columns={
        'country': 'Country Name',
        'flagCode': 'Country Code',
        target_column: 2023
    })
    if(file=='data/maternity-leave-by-country-2025.csv'):
        for index, row in df.iterrows():
            country_name = row['country']
            maternity_index=0
            payment = row['MaternityLeave_PayRate_txt_YearFree']
            payment_length=row['MaternityLeave_LengthInWeeks_numOfWeeks_YearFree']
            if(payment=='Full'):
              maternity_index=payment_length
            elif (str(payment)=='nan'):
              maternity_index=0
            elif('%' in payment):
              maternity_index = payment_length * ((float(payment.split('%')[0]) / 100) ** 2)
            elif (payment=='Partially Paid'):
              maternity_index=handle_partial_pay(country_name)
            else:
              print(country_name+' error '+payment)
              return None

            new_df.loc[index, 2023] = maternity_index
    country_name_mapping = {
            "Bahamas" : "Bahamas, The",
            "Brunei" : "Brunei Darussalam",
            "Cape Verde" : "Cabo Verde",
            "Czech Republic" : "Czechia",
            "DR Congo" : "Congo, Dem. Rep.",
            "Egypt" : "Egypt, Arab Rep.",
            "Gambia" : "Gambia, The",
            "Hong Kong" : "Hong Kong SAR, China",
            "Iran" : "Iran, Islamic Rep.",
            "Ivory Coast" : "Cote d'Ivoire",
            "Kyrgyzstan" : "Kyrgyz Republic",
            "Laos" : "Lao PDR",
            "Micronesia" : "Micronesia, Fed. Sts.",
            "North Korea" : "Korea, Dem. People's Rep.",
            "Palestine" : "West Bank and Gaza",
            "Republic of the Congo" : "Congo, Rep.",
            "Russia" : "Russian Federation",
            "Saint Kitts and Nevis" : "St. Kitts and Nevis",
            "Saint Lucia" : "St. Lucia",
            "Saint Vincent and the Grenadines" : "St. Vincent and the Grenadines",
            "Slovakia" : "Slovak Republic",
            "South Korea" : "Korea, Rep.",
            "Syria" : "Syrian Arab Republic",
            "Turkey" : "Turkiye",
            "Venezuela" : "Venezuela, RB",
            "Vietnam" : "Viet Nam",
            "Yemen" : "Yemen, Rep."
        }
    new_df["Country Name"] = new_df["Country Name"].replace(country_name_mapping)
    return new_df

def handle_partial_pay(country_name):
  match country_name:
    case 'Greece':
      return 17+26*(0.75**2)
    case 'Ireland':
      return 26* ((289/750.86)**2)
    case 'Canada':
      return 12*(0.55**2)
    case 'Romania':
      return 18*(0.85**2)
    case 'Sweden':
      return 52*(0.75**2)+13*((1280/8354)**2)
    case 'Seychelles':
      return 14
    case 'Trinidad and Tobago':
      return 13
    case 'Grenada':
      return 8 + 4*(0.6**2)
    case 'Iran':
      return 12*(0.667**2)
    case 'Thailand':
      return 6.5+2*(0.5**2)
    case 'Zimbabwe':
      return 12.6*(0.75**2)
    case 'Australia':
      return 12
    case 'Haiti':
      return 6
    case 'Namibia':
      return 12
    case 'Jamaica':
      return 12
    case 'Fiji':
      return 12
    case 'American Samoa':
      return 0
    case 'Saudi Arabia':
      return 10
    case 'Bolivia':
      return 8.4*(0.7**2)
    case 'Uganda':
      return 8
    case 'Qatar':
      return 3+4*(0.5**2)
    case _:
      print('error')
      return None

def merge(data, df_list):
    for new_df in df_list:
      new_df_year_columns = [col for col in new_df.columns if isinstance(col, int)]
      new_df_country_map = new_df.set_index('Country Name')
      for key, value in data.items():
          country_name = key[0]
          year = key[1]
          data_list = value[1]
          if country_name in new_df_country_map.index:
              new_df_row = new_df_country_map.loc[country_name]
              if year in new_df_row.index and pd.notna(new_df_row[year]):
                      new_value = new_df_row[year]
                      data_list.append(new_value)
              #spaghetti code incoming, hope doest break anything
              elif str(year) in new_df_row.index and pd.notna(new_df_row[str(year)]):
                      new_value = new_df_row[str(year)]
                      data_list.append(new_value)
              else:
                      data_list.append(float('nan'))

          else:
              data_list.append(float('nan'))

def extract_data():
  data={}
  df_fertility=extract_WorldBank_file('data/total-fertility-rate.csv')
  regions_to_exclude_by_code = [
      'CEB', 'EAR', 'IBD', 'LTE', 'MAF', 'PSS', 'AFE', 'AFW', 'ARB', 'CSS', 'EAP', 'EAS', 'ECA', 'ECS', 'EMU', 'EUU', 'FCS', 'HIC', 'HPC',
      'IDA', 'IDB', 'IDX', 'LAC', 'LCN', 'LDC', 'LIC', 'LMC', 'LMY', 'MEA', 'MIC', 'MNA',
      'NAC', 'OED', 'OSS', 'PRE', 'PST', 'SAS', 'SSA', 'SSF', 'SST', 'UMC', 'WLD','IBT','TEA','TEC','TLA','TSS','TMN','TSA'
  ]
  df_fertility = df_fertility[~df_fertility['Country Code'].isin(regions_to_exclude_by_code)]

  # Get all year columns dynamically
  year_columns = [col for col in df_fertility.columns if col.isdigit()]

  # Populate the data dictionary with entries for each country and year
  for index, row in df_fertility.iterrows():
      country_name = row['Country Name']
      for year in year_columns:
          fertility_rate = row[year]
          if pd.notna(fertility_rate):
              data[(country_name, int(year))] = (fertility_rate, [])

  merge(data,extract_OurWorldInData()+extract_WorldBank()+extract_PewReaserch()+extract_UNDP()+extract_Worldpopulationreview())
  return data
